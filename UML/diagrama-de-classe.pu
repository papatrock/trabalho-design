@startuml diagrama-de-classe

class Espaco {
    - String localizacao
    - String tipo
    - String descricao
    - Int capacidade
    - Double preco
    - Fotos fotos

    + geters()
    + seters()
}

class EspacoControle {
    + cadastrarEspaco()
    + atualizarEspaco()
    + deletarEspaco()

}

class Reserva {
    - Espaco espaco
    - Date dataInicial
    - Date dataFinal
    - Int CPFReserva

    + geters()
    + seters()

}

class ReservaControle {
    + void reservarEspaco()
    + void cancelarReserva()
    + void verReserva()
    + void verEspacosVagos()
    + List<Espaco> EspacosFiltro()
}

interface Pagamento {

}

class PagamentoCartao implements Pagamento{

}

class PagamentoDinheiro implements Pagamento{

}

class PagamentoControle {
    + void validarPagamento()
    + void confirmarPagament()
    + void cancelarPagamento()
    + void lockReserva()
    + void unlockReserva()
}

note top of PagamentoControle #Red
    Fazer lock do espaço aqui
    Até confirmação do pagamento?
end note

note right of PagamentoControle
    Valida ou nao pagamentos,
    comunicando com ReservaControle
    para fazer ou nao a reserva
end note

abstract class Usuario {
    - nome
    - email
    - senha
    - CPF
}

class UsuarioControle {
    + cadastrarUsuario()
    + getUsuario()
    + atualizarUsuario()
    + deletarUsuario()
}

class Cliente extends Usuario{
    - List<Espaco> espacosReservados

    + geters()
    + seters ()
}

class Admin extends Usuario{
    # void cancelarReserva()
    # void administrarUsuarios()
}

EspacoControle -- Espaco
Espaco "1"--"*"Reserva

ReservaControle --> Reserva
Reserva -- PagamentoControle
Reserva "*"--"1" Cliente
Reserva -- Pagamento

UsuarioControle -- Usuario


PagamentoControle --> PagamentoDinheiro
PagamentoControle --> PagamentoCartao

Admin --> EspacoControle
Admin --> ReservaControle
Admin --> PagamentoControle :administra
Admin --> UsuarioControle :administra


Cliente --> PagamentoControle :usa
Cliente --> ReservaControle :usa
@enduml